# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
#  config.vm.box = "boxcutter/ubuntu1604"
 # config.vm.box = "ubuntu/trusty64"
   config.vm.box = "williamyeh/ubuntu-trusty64-docker"

#   condig.vm.box = "pulsesecure/alpine-3.3-x86_64-docker"

  # Assign a friendly name to this host VM
   config.vm.hostname = "es-host"

 # config.vm.provision :docker
 # config.vm.provision :docker_login, username: "benyh", password: "Ericom123$"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
   config.vm.network "forwarded_port", guest: 22, host: 10022
   config.vm.network "forwarded_port", guest: 9000, host: 19000
   config.vm.network "forwarded_port" , guest: 3128, host: 13128
   config.vm.network "forwarded_port" , guest: 5601, host: 15601
   config.vm.network "forwarded_port" , guest: 8500, host: 18500
  
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #  config.vm.network "public_network"
  

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  #config.vm.synced_folder "/"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
 config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
      # vb.gui = true
      
      # set VM name
      vb.name = "shield_eval"
     # Customize the amount of memory on the VM:
     vb.memory = "3072"
     vb.cpus = 3
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get upgrade
    apt-get install -y git tofrodos dos2unix firefox 
    mkdir ericomshield
    cd ericomshield
    ES_repo_run="https://raw.githubusercontent.com/ErezPasternak/Shield/master/Dev15/run.sh"
    ES_repo_yml="https://raw.githubusercontent.com/ErezPasternak/Shield/master/Dev15/docker-compose.yml"
    curl -s -S -o docker-compose.yml $ES_repo_yml
    curl -s -S -o run.sh $ES_repo_run
    chmod +x run.sh
    wget https://raw.githubusercontent.com/ErezPasternak/Shield/master/Dev15/ES-setup.sh
    dos2unix ES-setup.sh  
    chmod o+x ES-setup.sh
    sudo ./ES-setup.sh "benyh" "Ericom123$"
    echo ' '
    echo ' ' 
    echo ' your ericomshield VM is ready '
    echo ' your VM address is '
    echo ' '
    hostname -I | cut -d' ' -f2
    echo ' '
    echo ' you can use these ports'
    echo ' port 10022 - ssh'
    echo ' port 19000 - admin'
    echo ' port 13128 - proxy'
    echo ' port 15601 - logs'
    echo ' port 18500 - consul'
    echo ' '
    echo ' Have a nice day'
  SHELL


end
